#include <cmath>
#include <cstdio>
#include <numeric>
#include <iostream>

using namespace std;

/***************************************************************************************/
// Project Euler #2: Even Fibonacci Numbers	
// Each term in the Fibonacci sequence is generated by adding the previous two terms:
// 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed N, 
// find the sum of even-valued terms.
//
// Constraints:
// T: number of test cases
// 1 <= T <= 10^5
// 10 <= N <= 4 * 10^16
//
// We observe that the Fibonacci number sequence has the following pattern:
// O, O, E, O, O, E, O, O, E, O, O, E, O ...
// Every 3rd Fibonacci number is an even number.

// We could form the following pattern with every 3rd Fibonacci number, as follows:
// 2, 8, 34, 144, ...
// which could be expressed as Fn = 4Fn-1 + Fn-2 with F1 = 2, F2 = 8
// Sum of first two terms = 10
// The loop continues until Fn exceeds integer N.
/***************************************************************************************/


long even_fib_sum(long limit) {
	
    long fn_2 = 2; // Fn-2
    long fn_1 = 8; // Fn-1
    long sum = 10; // sum of even Fib numbers
    long fn; // Fn
	
    while (fn_1 < limit) {
        
        fn = 4*fn_1 + fn_2; // Fn
        
        if (fn >= limit)
            break;
        
        sum += fn;
        
        fn_2 = fn_1; // update Fn-2
        fn_1 = fn; // update Fn-1
    }
    
    return sum;
}

int main(){
    int t;
    cin >> t;
    for(int a0 = 0; a0 < t; a0++){
        long n;
        cin >> n;
        
        long even_sum = even_fib_sum(n);
        
        cout << even_sum << endl;
        
    }
    return 0;
}
